<#@ template language="C#" linePragmas="false" debug="false" hostspecific="false" visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<# if(this.Options.IsNamespaceSpecified) { #>
namespace <#= this.Options.Namespace #>
{
<# } #>
	abstract partial class <#= this.Options.Name #> 
	{
		public enum Case 
		{
			<#= string.Join(", ", this.Options.Methods.Select(method => method.Name)) #>
		}

		protected <#= this.Options.Symbol.Name #>(Case type)
		{
			this.Type = type;
		}

<# foreach(var method in this.Options.Methods) { #>
		private class __<#= method.Name #> : <#= this.Options.FullName #>
		{
			public __<#= method.Name #>(<#= Helper.ParamsOf(method) #>) : base(Case.<#= method.Name #>) 
			{
<# foreach(var parameter in method.Parameters) { #>
				this.<#= parameter.Name #> = <#= parameter.Name #>;
<# } #>
			}

<# foreach(var parameter in method.Parameters) { #>
			public <#= parameter.Type #> <#= parameter.Name #>;
<# } #>
		}
<# } #>

<# foreach(var method in this.Options.Methods) { #>
		public static partial <#= this.Options.FullName #> <#= method.Name #>(<#= Helper.ParamsOf(method) #>)
		{
			return new __<#= method.Name#>(<#= string.Join(", ", method.Parameters.Select(p => p.Name)) #>);
		}

		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static bool <#= method.Name #>(<#= this.Options.DeconstructMethodParamsOf(method) #>) 
		{
			if (__self.Type == Case.<#= method.Name #>)
			{
				var __instance = (__<#= method.Name#>)__self;
<# foreach(var parameter in method.Parameters) { #>
				<#= parameter.Name #> = __instance.<#= parameter.Name #>;
<# } #>
				return true;
			}

<# foreach(var parameter in method.Parameters) { #>
			<#= parameter.Name #> = default;
<# } #>
			return false;
		}
<# } #>
		public Case Type { get; }
	}
<# if(this.Options.IsNamespaceSpecified) { #>
}
<# } #>