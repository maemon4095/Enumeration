<#@ template language="C#" linePragmas="false" debug="false" hostspecific="false" visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
<# if(this.Options.IsNamespaceSpecified) { #>
namespace <#= this.Options.Namespace #>
{
<# } #>
	readonly partial struct <#= this.Options.Name #> 
	{
		public enum Case 
		{
			<#= string.Join(", ", this.Options.Methods.Select(method => method.Name)) #>
		}
		struct __Implement
		{
			[global::System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit)]
			public struct Unmanaged 
			{
<# foreach(var method in this.Options.Methods) { #>
				public struct __<#= method.Name #>
				{
<# foreach(var parameter in method.Parameters.Where(p => (p.Type is INamedTypeSymbol t) && !t.IsGenericType && t.IsUnmanagedType)) { #>
					public <#= Helper.FullNameOf(parameter.Type) #> <#= parameter.Name #>;
<# } #>
				}
<# } #>

<# foreach(var method in this.Options.Methods) { #>
				[global::System.Runtime.InteropServices.FieldOffset(0)]
				public __<#= method.Name #> <#= method.Name #>;
<# } #>
			}

			public struct Managed
			{
<# for(var i = 0; i < this.Options.ReferenceTypeCount; ++i) { #>
				public global::System.Object __reference_<#= i #>;
<# } #>
<# foreach(var (type, count) in this.Options.OtherTypes) { #>
<# for(var i = 0; i < count; ++i) { #>
				public <#= Helper.FullNameOf(type) #> <#= Helper.EscapedFullNameOf(type) #>_<#= i #>;
<# } #>
<# } #>
			}

			public Case type;
			public Unmanaged unmanaged;
			public Managed managed;

			public <#= this.Options.Identifier #> As() => global::System.Runtime.CompilerServices.Unsafe.As<__Implement, <#= this.Options.Identifier #>>(ref this);
		}

<# foreach(var method in this.Options.Methods) { #>
		public static partial <#= this.Options.Identifier #> <#= method.Name #>(<#= Helper.ParamsOf(method) #>) 
		{
			var impl = default(__Implement);
			impl.type = Case.<#= method.Name #>;
<# foreach(var parameter in method.Parameters) { #>
<# if(parameter.Type.IsReferenceType) { #>
<# var index = method.Parameters.Count(p => p.Ordinal < parameter.Ordinal && p.Type.IsReferenceType); #>
			impl.managed.__reference_<#= index #> = <#= parameter.Name #>;
<# } else if(parameter.Type is not INamedTypeSymbol || !parameter.Type.IsUnmanagedType) { #>
<# var index = method.Parameters.Count(p => p.Ordinal < parameter.Ordinal && Helper.SymbolEquals(p.Type, parameter.Type)); #>
			impl.managed.<#= Helper.EscapedFullNameOf(parameter.Type) #>_<#= index #> = <#= parameter.Name #>;
<# } else { #>
			impl.unmanaged.<#= method.Name #>.<#= parameter.Name #> = <#= parameter.Name #>;
<# } #>
<# } #>
			return impl.As();
		}

		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static bool <#= method.Name #>(<#= this.Options.DeconstructMethodParamsOf(method) #>) 
		{
			if (__self.Type == Case.<#= method.Name #>)
			{
<# foreach(var parameter in method.Parameters) { #>
<# if(parameter.Type.IsReferenceType) { #>
<# var index = method.Parameters.Count(p => p.Ordinal < parameter.Ordinal && p.Type.IsReferenceType); #>
				<#= parameter.Name #> = (<#= Helper.FullNameOf(parameter.Type) #>)__self.__implement.managed.__reference_<#= index #>;
<# } else if(parameter.Type is not INamedTypeSymbol || !parameter.Type.IsUnmanagedType) { #>
<# var index = method.Parameters.Count(p => p.Ordinal < parameter.Ordinal && Helper.SymbolEquals(p.Type, parameter.Type)); #>
				<#= parameter.Name #> = __self.__implement.managed.<#= Helper.EscapedFullNameOf(parameter.Type) #>_<#= index #>;
<# } else { #>
				<#= parameter.Name #> = __self.__implement.unmanaged.<#= method.Name #>.<#= parameter.Name #>;
<# } #>
<# } #>
				return true;
			}

<# foreach(var parameter in method.Parameters) { #>
			<#= parameter.Name #> = default;
<# } #>
			return false;
		}
<# } #>

		readonly __Implement __implement;
		public Case Type => this.__implement.type;
	}
<# if(this.Options.IsNamespaceSpecified) { #>
}
<# } #>